<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdownTest</title>
    <url>/posts/308bc09b/</url>
    <content><![CDATA[<p>一般在本地用markdown语法编写文章，然后再上传，所以有必要进行测试，确保不同markdown的不同功能在网页上的到渲染并展示</p>
<h3 id="readmore"><a href="#readmore" class="headerlink" title="readmore"></a>readmore</h3><p>设置文章展开功能</p>
<span id="more"></span>
<h3 id="中英文支持"><a href="#中英文支持" class="headerlink" title="中英文支持"></a>中英文支持</h3><p>this is  a test</p>
<p>这是一个测试</p>
<h3 id="代码高亮与复制"><a href="#代码高亮与复制" class="headerlink" title="代码高亮与复制"></a>代码高亮与复制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is a test!\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>数学公式渲染默认关闭，在需要使用公式的文章开头的配置中添加<code>mathjax: true</code></p>
<script type="math/tex; mode=display">
\bbox[yellow]{
    e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n \qquad (1)
}</script><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hexo.io/">hexo</a></p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><p>现在图片数量不多，直接上传到github上，后续如果有优化性能的需求会考虑搭载图床</p>
<p><img src="/assets/other/卡比兽.png" alt="卡比兽"></p>
<p>卡比兽</p>
<h3 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h3><p>一开始想着像出教材一样从语法到应用都讲清楚，但是后来发现只是在不断叙述大牛的优秀书籍的内容。</p>
<p>我想博客于我自己或是对于此博客的游客来说，更关注的是对具体问题的解决经验和更深层次的思考，而不是照本宣科的术语累积。</p>
<p>2024年9月25日，重新启程！</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>static</title>
    <url>/posts/80c02825/</url>
    <content><![CDATA[<p>static是C/C++中的一个关键字，用于处理变量的存储方式和作用范围。</p>
<p>被static修饰过的变量会被存储在静态区，到程序结束才会释放资源。</p>
<p>静态变量只能被初始化一次，默认赋值为0；</p>
<p>静态函数或者变量被static指定为内部链接，不会被其他文件引用；</p>
<p><strong>静态局部变量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_normal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">	std::cout &lt;&lt; ++x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_static</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	std::cout &lt;&lt; ++x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1 1 1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">		<span class="built_in">func_normal</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//1 2 3</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">		<span class="built_in">func_static</span>();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//std::cout&lt;&lt;x;//error</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、static并不改变作用域，所以在主函数中无法输出x；</p>
<p>2、改变了静态局部变量的生命周期，所以静态局部变量值递增；</p>
<p>3、只能初始化一次，第二次初始化静态局部变量时语句并没有生效；</p>
<p>静态变量很适合用作计数器</p>
<p><strong>默认值为0</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> ch_normal;</span><br><span class="line">	<span class="type">static</span> <span class="type">char</span> ch_static;</span><br><span class="line">	<span class="comment">//std::cout &lt;&lt; ch_nomal;//C2065,未定义标识符ch_normal</span></span><br><span class="line">	std::cout &lt;&lt; ch_static;<span class="comment">//输出为空</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>静态成员变量</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> val_normal;</span><br><span class="line">	<span class="comment">//声明</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> val_static;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="type">int</span> myclass::val_static = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>静态成员变量是属于类的，除了像正常访问类成员变量的方法外，还可以通过类名访问public公开的静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> val_static;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> myclass::val_static = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout&lt;&lt;myclass::val_static&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>静态成员函数</strong></p>
<p>静态成员函数内部没有this指针，所以不能访问内部的非静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> val_normal;</span><br><span class="line">	<span class="comment">//声明</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> val_static;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func_normal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        val_normal=<span class="number">1</span>;<span class="comment">//OK</span></span><br><span class="line">        val_static=<span class="number">1</span>;<span class="comment">//0k</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func_static</span><span class="params">()</span></span>&#123;</span><br><span class="line">        val_normal=<span class="number">1</span>;<span class="comment">//error</span></span><br><span class="line">        val_static=<span class="number">1</span>;<span class="comment">//0k</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="type">int</span> myclass::val_static = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>如果有访问成员变量的需求，一般是通过参数传递一个实例化的类对象作为参数间接访问</p>
<p>练习：</p>
<p>1、面试常问：说下C++中的static关键字</p>
<p>static是C/C++中的一个关键字，用于处理变量的存储方式和作用范围。</p>
<p>static修饰的变量和函数会生成一个内部链接，放在静态数据区，生命周期变为随程序结束而结束，默认初始化为0，不会被其他文件引用。在C++的类中，静态类成员变量属于类，支持所有类实例共同访问和使用；而静态成员函数没有this指针，不能访问类中的非静态成员函数。</p>
<p>2、编写一个类，能够查看类的实例化对象的个数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> object_count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">myclass</span>() &#123; object_count++; &#125;</span><br><span class="line">	~<span class="built_in">myclass</span>() &#123; object_count--; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> object_count; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> myclass::object_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	myclass a, b, c;</span><br><span class="line">	&#123;</span><br><span class="line">		myclass d;</span><br><span class="line">		std::cout &lt;&lt; d.<span class="built_in">getCount</span>() &lt;&lt; std::endl;<span class="comment">//4</span></span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; a.<span class="built_in">getCount</span>() &lt;&lt; std::endl;<span class="comment">//3</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、结合单例设计模式，写一个类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;This is a singleton instance.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton* s1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    s1-&gt;<span class="built_in">showMessage</span>();</span><br><span class="line"></span><br><span class="line">    Singleton* s2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;s1 and s2 are the same instance.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;s1 and s2 are different instances.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语法基础</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>

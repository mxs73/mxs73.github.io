<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdownTest</title>
    <url>/posts/308bc09b/</url>
    <content><![CDATA[<p>一般在本地用markdown语法编写文章，然后再上传，所以有必要进行测试，确保不同markdown的不同功能在网页上的到渲染并展示</p>
<h3 id="readmore"><a href="#readmore" class="headerlink" title="readmore"></a>readmore</h3><p>设置文章展开功能</p>
<span id="more"></span>
<h3 id="中英文支持"><a href="#中英文支持" class="headerlink" title="中英文支持"></a>中英文支持</h3><p>this is  a test</p>
<p>这是一个测试</p>
<h3 id="代码高亮与复制"><a href="#代码高亮与复制" class="headerlink" title="代码高亮与复制"></a>代码高亮与复制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is a test!\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>在需要使用公式的文章<code>title</code>添加<code>mathjax: true</code>，优化性能</p>
<script type="math/tex; mode=display">
\bbox[yellow]{
    e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n \qquad (1)
}</script><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://hexo.io/">hexo</a></p>
<h3 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h3><p>现在图片数量不多，直接上传到github上，后续会考虑搭载图床</p>
<p><img src="/assets/other/卡比兽.png" alt="卡比兽"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>C基础_数据</title>
    <url>/posts/8a589a60/</url>
    <content><![CDATA[<p>程序的本质是计算机存储的一串0,1数据，不管是变量还是函数都是如此。</p>
<p>从内存的角度分析数据是学习C语言的关键。</p>
<p>本文内容如下：</p>
<ul>
<li>存储概念</li>
<li>基本的数据类型</li>
<li>数组</li>
<li>指针</li>
<li>支持自定义的数据类型</li>
<li><code>define</code></li>
</ul>
<span id="more"></span>
<h2 id="1、存储"><a href="#1、存储" class="headerlink" title="1、存储"></a>1、存储</h2><h3 id="1-1-内存与外存"><a href="#1-1-内存与外存" class="headerlink" title="1.1 内存与外存"></a>1.1 内存与外存</h3><p>cpu对数据进行处理，存储器存储数据，辅助cpu。计算机存储分为内存和外存，内存就是常说的“运行内存”，外存则是常说的“磁盘容量”，U盘、硬盘等的存储空间都是外存。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>存储器名称</th>
<th>类型</th>
<th>存储方式</th>
<th>常见类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>外存</td>
<td>外部存储器</td>
<td>长时间存储程序/数据，掉电不丢</td>
<td>ROM、ERROR、FLASH（NAND、NOR）、硬盘、光盘</td>
</tr>
<tr>
<td>内存</td>
<td>内部存储器</td>
<td>暂存程序/数据， 掉电丢失</td>
<td>SRAM、DRAM、DDR、DDR2、DDR3</td>
</tr>
</tbody>
</table>
</div>
<p>可以简单理解成挑水，人就是cpu，水桶就是内存，蓄水池就是外存。</p>
<h3 id="1-2-内存单位"><a href="#1-2-内存单位" class="headerlink" title="1.2 内存单位"></a>1.2 <strong>内存单位</strong></h3><p><strong>位 bit</strong></p>
<p>我们知道计算机只能存0 和 1，一个0或者一个1占用的最小的空间叫做位。</p>
<p><strong>字节 byte</strong></p>
<p>8位为一组，称为1字节</p>
<p><strong>字 word</strong></p>
<p>我们说的电脑64位、32位，说的就是字长。</p>
<p>更大的内容单位进制为1024</p>
<p>1024 byte = 1 MB(兆字节)</p>
<p>1024 MB = 1 GB</p>
<p>1024 GB = 1 TB</p>
<p>需要注意的是：</p>
<p>硬盘厂商是按1000进制算的，所以实际在电脑中显示的大小比厂商标注的要小</p>
<p>宽带的100M指的是100兆位（M bit），而不是100兆字节（M byte），所以理想状态下最快下载速度为12.5MB/s</p>
<h3 id="1-3-内存地址"><a href="#1-3-内存地址" class="headerlink" title="1.3 内存地址"></a>1.3 内存地址</h3><p><strong>地址</strong></p>
<p>内存的每个字节分配一个编号，这个编号就是内存地址，编号长度等于字长</p>
<p><strong>物理地址与逻辑地址</strong></p>
<p>数据实际上都是存储在物理存储器中，当然可以直接通过物理地址控制设备。为了方便，操作系统会把物理内存映射成虚拟内存，通过这些虚拟内存的逻辑地址，程序可以间接控制物理存储器中的内存。</p>
<p><strong>寻址</strong></p>
<p>根据分配的虚拟地址找到对应的存储器上的内存，完成数据的读写的过程叫做寻址。</p>
<p>确定一段内存需要两个参数，起始地址和偏移量。</p>
<p>字长对应寻址内存大小，32位的计算机地址为32位，也就是可以迅速确定32位的地址，寻址空间为2^32</p>
<h3 id="1-4-大小端"><a href="#1-4-大小端" class="headerlink" title="1.4 大小端"></a>1.4 <strong>大小端</strong></h3><p>数据的大小端存储方式是计算机体系结构中关于字节序的一种概念，它指的是多字节数据类型（如16位、32位或64位的整数）在内存中是如何存储的。根据字节序的不同，数据的存储方式可以分为大端模式（Big-endian）和小端模式（Little-endian）两种。</p>
<p><strong>大端模式（Big-endian）</strong></p>
<p>在大端模式下，数据的最高有效字节（Most Significant Byte, MSB）存储在最低的内存地址中，而最低有效字节（Least Significant Byte, LSB）则存储在最高的内存地址中。<strong>这种存储方式类似于人们阅读数字的习惯</strong>，即从左到右，从高位到低位。</p>
<p>例如，如果我们有一个16位的无符号整数<code>0x1234</code>（即十进制的4660），在大端模式下，它在内存中的存储方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">深色版本</span><br><span class="line"></span><br><span class="line">地址:       | 低地址          | 高地址          |</span><br><span class="line">字节内容:    | 0x12 (MSB)      | 0x34 (LSB)      |</span><br></pre></td></tr></table></figure>
<p><strong>小端模式（Little-endian）</strong></p>
<p>相反，在小端模式下，数据的最低有效字节存储在最低的内存地址中，而最高有效字节则存储在最高的内存地址中。这种方式与大端模式相反。</p>
<p>继续使用<code>0x1234</code>的例子，在小端模式下的存储方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">深色版本</span><br><span class="line"></span><br><span class="line">地址:       | 低地址          | 高地址          |</span><br><span class="line">字节内容:    | 0x34 (LSB)      | 0x12 (MSB)      |</span><br></pre></td></tr></table></figure>
<p><strong>中端模式（Middle-endian / Mixed-endian）</strong></p>
<p>除了大端和小端模式之外，还存在一些特殊的架构，它们对高低字节的存储位置有自己独特的规定，如IBM的PowerPC架构中，整数和浮点数的字节序可以是不同的。但这种模式相对较少见，大多数现代计算机遵循大端或小端模式。</p>
<p><strong>网络字节序</strong></p>
<p>在计算机网络通信中，为了保证数据在网络传输中的一致性，通常采用大端模式作为网络字节序（Network Byte Order），这是由TCP/IP协议栈规定的。</p>
<p><strong>识别和转换</strong></p>
<p>在进行跨平台的数据交换或网络通信时，了解目标平台的字节序非常重要，以避免数据解释错误。C语言中，可以使用<code>&lt;arpa/inet.h&gt;</code>库中的<code>ntohl()</code>（网络字节序转主机字节序）、<code>htonl()</code>（主机字节序转网络字节序）等函数来处理字节序问题，确保数据的正确传输和解析。</p>
<p>理解数据的大小端存储方式对于编写跨平台代码、网络编程以及处理二进制文件格式时尤其重要。</p>
<h2 id="2、基本数据"><a href="#2、基本数据" class="headerlink" title="2、基本数据"></a>2、基本数据</h2><p>确定一段内存需要两个元素：起始地址，内存长度。</p>
<p>找到内存后，编译器通过一定的解读规则把0,1组成的数据解读成对应数据类型的数据。</p>
<h3 id="2-1-标识符"><a href="#2-1-标识符" class="headerlink" title="2.1 标识符"></a>2.1 标识符</h3><p>机器码通过地址确定内存，但是机器码和数据的实际函数难以联系起来，所以在C语言中，标识符是用来命名变量、函数、数组、结构体、枚举、类型定义等的用户定义的名字。简单来说，c语言可以用标识符确定一段内存。</p>
<p>标识符的命名规则：</p>
<ol>
<li><strong>第一个字符必须是字母（a-z 或 A-Z）或下划线（_）。</strong> 数字不能作为标识符的第一个字符。</li>
<li><strong>后续字符可以是字母、数字或下划线。</strong> 这意味着标识符可以包含字母、数字和下划线，但数字不能出现在首位。</li>
<li><strong>标识符区分大小写。</strong> 因此，<code>Variable</code> 和 <code>variable</code> 在C语言中被视为两个不同的标识符。</li>
<li><strong>标识符不能是C语言的关键字。</strong> 关键字是C语言中保留的单词，具有特殊的意义，例如 <code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>、<code>int</code>、<code>double</code> 等。使用关键字作为标识符会导致编译错误。</li>
<li><strong>标识符应该具有描述性。</strong> 虽然C语言对标识符的长度没有严格限制，但大多数编译器和标准库函数名称限制在31个字符以内。建议使用有意义的标识符，以增强代码的可读性。</li>
<li><strong>C99标准允许标识符中包含Unicode字符，但这种特性并不广泛支持，且在不同的编译器和平台上可能表现不一致。</strong></li>
</ol>
<p>例如，以下是一些合法的标识符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">myVariableName</span><br><span class="line">counter</span><br><span class="line">_age</span><br></pre></td></tr></table></figure>
<p>而以下是一些非法的标识符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>ndVar  <span class="comment">// 以数字开头</span></span><br><span class="line"><span class="keyword">for</span>     <span class="comment">// 使用关键字</span></span><br></pre></td></tr></table></figure>
<p>标识符的选择应当反映其所代表的对象的含义，以便提高代码的可读性和维护性。例如，使用<code>age</code>作为一个人年龄的变量名要比使用<code>x</code>更好。</p>
<p><strong>约定变量名用下划线命名法，函数用驼峰命名法，且首字母小写</strong></p>
<h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h3><p><a href="https://zhidao.baidu.com/question/345737662.html">在C语言中什么叫关键字，怎么用_百度知道 (baidu.com)</a></p>
<p>C语言的关键字是由C语言标准定义的保留字，它们在语言中具有特定的意义和用途，不能用作标识符（如变量名、函数名）。C语言的关键字涵盖了各种语言结构和类型声明，以下是一些常见的C语言关键字及其用途：</p>
<ol>
<li><p><strong>基本类型关键字</strong>：</p>
<ul>
<li><code>char</code>：定义字符类型变量。</li>
<li><code>int</code>：定义整型变量。</li>
<li><code>float</code>：定义单精度浮点型变量。</li>
<li><code>double</code>：定义双精度浮点型变量。</li>
<li><code>long</code>：定义长整型变量。</li>
<li><code>short</code>：定义短整型变量。</li>
<li><code>signed</code>/<code>unsigned</code>：指定整型变量是否带符号。</li>
</ul>
</li>
<li><p><strong>复合类型关键字</strong>：</p>
<ul>
<li><code>struct</code>：用于定义结构体类型。</li>
<li><code>union</code>：用于定义共用体（联合体）类型。</li>
<li><code>enum</code>：用于定义枚举类型。</li>
<li><code>typedef</code>：用于创建新的类型名。</li>
</ul>
</li>
<li><p><strong>控制结构关键字</strong>：</p>
<ul>
<li><code>if</code>/<code>else</code>：用于条件语句。</li>
<li><code>switch</code>/<code>case</code>/<code>default</code>：用于多路分支选择。</li>
<li><code>for</code>：用于循环控制。</li>
<li><code>while</code>/<code>do...while</code>：用于循环控制。</li>
<li><code>break</code>：用于跳出循环或<code>switch</code>结构。</li>
<li><code>continue</code>：用于跳过当前循环的剩余部分，进入下一次迭代。</li>
</ul>
</li>
<li><p><strong>函数和存储关键字</strong>：</p>
<ul>
<li><code>void</code>：表示无类型或函数没有返回值。</li>
<li><code>return</code>：用于从函数返回值或退出函数。</li>
<li><code>static</code>：用于定义静态变量或函数。</li>
<li><code>extern</code>：用于声明变量或函数在其他文件中定义。</li>
<li><code>auto</code>：早期C语言中用于声明自动变量，现代C语言中不常用，已被隐式默认。</li>
</ul>
</li>
<li><p><strong>其他关键字</strong>：</p>
<ul>
<li><code>sizeof</code>：用于计算类型或变量的大小（字节数）。</li>
<li><code>const</code>：用于声明常量或指定变量的一部分为常量。</li>
<li><code>volatile</code>：用于指定变量可能被意外改变，通常用于硬件接口编程。</li>
</ul>
</li>
</ol>
<p>C语言的最新标准C11增加了<code>_Alignas</code>和<code>_Alignof</code>关键字，用于处理对齐属性和对齐要求，但这不是所有C编译器都支持。</p>
<p>记住，关键字是语言的一部分，不能用作变量名、函数名或其他标识符。使用关键字作为标识符会导致编译错误。C语言的关键字数量相对较少，这使得语言更加简洁和易于学习，同时也降低了拼写错误的可能性。</p>
<h3 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h3><p><a href="https://zhuanlan.zhihu.com/p/85264460">C语言基础—基本数据类型 - 知乎 (zhihu.com)</a></p>
<p>数据类型告诉编译器，内存长度和解读这段内存的规则。比如：</p>
<p>数据长度：int占4个字节，char占1个字节；</p>
<p>数据解读方式：int的第一位是符号位，标识正负，后面31表示数据大小。</p>
<p>学习数据类型就是要掌握数据类型对应的：</p>
<ul>
<li>所占内存大小</li>
<li>每一位表示什么含义</li>
<li>数据的取值范围</li>
</ul>
<p>通过<code>sizeof</code>查看字节大小，<code>#include&lt;limits.h&gt;</code>中存放了数据类型的取值范围</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以int为例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//输出数据类型int占多少字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d —— %d\n&quot;</span>,INT_MIN,INT_MAX);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ASCII码</strong></p>
<p><a href="https://www.asciim.cn/">ASCII码 - 基本ASCII码和扩展ASCII码,最全的ASCII码对照表 (asciim.cn)</a></p>
<p>计算机存储的是01组成的数据，对于字符数据，一般会把每一个字符进行编号制表，用表上的数字编号表示字符</p>
<p>默认的字符表是ASCII表，对所有键盘按键进行编号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);<span class="comment">//ASCII码值</span></span><br></pre></td></tr></table></figure>
<p>需要记忆的ASCII码：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>ASCII值</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>48</td>
</tr>
<tr>
<td>A</td>
<td>65</td>
</tr>
<tr>
<td>a</td>
<td>97</td>
</tr>
</tbody>
</table>
</div>
<p>利用ASCII码可以对字符进行处理，比如大小写转化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">toUpperCase</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*str)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*str&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;*str&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            *str-=(<span class="string">&#x27;a&#x27;</span>-<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[]=<span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    toUpperCase(ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个demo有几个需要注意的点</p>
<ul>
<li>ch的初始化，这里使用的是数组，如果使用<code>char* ch=&quot;hello,world&quot;</code>则指向的是只读的字面值，不可修改</li>
<li>ch数组当做参数传递给函数时，数组会退化成指针，实际上是做了值传递，所以<code>str++</code>不会影响<code>printf(&quot;%s\n&quot;,ch)</code></li>
<li>如果要通过函数改变ch的首地址，建议使用二级指针，同时保证ch的数据放在堆上，避免编译警告</li>
</ul>
<p><strong>转义字符</strong></p>
<p>在输出数据时，有些字符和语法冲突，由于编译语法的优先级比较高，为了正确输出这些字符，就需要用到转移符</p>
<p><a href="https://learn.microsoft.com/zh-cn/cpp/c-language/escape-sequences?view=msvc-170">转义序列 | Microsoft Learn</a></p>
<p>输出<code>&quot;13%5=3&quot;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\&quot;13%%5=3\&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-4-类型转换"><a href="#2-4-类型转换" class="headerlink" title="2.4 类型转换"></a>2.4 <strong>类型转换</strong></h3><p>在C语言中，类型转换（Type Conversion）用于将一个数据类型的值转换为另一个数据类型的值。类型转换有两种主要形式：隐式类型转换（Implicit Type Conversion）和显式类型转换（Explicit Type Conversion）。</p>
<p><strong>1. 隐式类型转换（Implicit Type Conversion）</strong></p>
<p>隐式类型转换，也称为自动类型转换，是在不需要程序员明确指示的情况下由编译器自动执行的。它通常发生在混合类型表达式中，例如当不同类型的变量或常量参与同一运算时。C语言中的自动类型提升规则如下：</p>
<ul>
<li>当较小的类型与较大的类型相混合时，较小的类型会被提升到较大的类型。</li>
<li>字符类型（<code>char</code>和<code>short</code>）在进行算术运算时通常会被提升到<code>int</code>类型。</li>
<li>浮点类型与整型混合时，整型会被转换为浮点类型。</li>
</ul>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="number">3.5</span>;</span><br><span class="line"><span class="type">float</span> result = a + b;  <span class="comment">// a会自动转换为float类型</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 显式类型转换（Explicit Type Conversion）</strong></p>
<p>显式类型转换，也称为强制类型转换（Forced Type Conversion），是程序员通过代码明确指定的类型转换。这通常使用类型转换运算符来完成，语法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(target_type)(expression)</span><br></pre></td></tr></table></figure>
<p>或者使用C99标准引入的更直观的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(target_type) expression</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> b = (<span class="type">float</span>)a;  <span class="comment">// 显式将int类型转换为float类型</span></span><br></pre></td></tr></table></figure>
<p><strong>强制类型转换的注意事项：</strong></p>
<ul>
<li><strong>精度损失</strong>：从高精度类型转换到低精度类型（如<code>float</code>到<code>int</code>）可能会导致数据丢失。</li>
<li><strong>溢出</strong>：转换到一个不能容纳原始值的类型可能会导致溢出。</li>
<li><strong>指针类型转换</strong>：可以将一个指针类型转换为另一个指针类型，但必须确保转换后的指针类型与目标类型兼容。</li>
</ul>
<p><strong>示例代码</strong></p>
<p>以下是一个示例，展示了C语言中的类型转换：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">float</span> b = <span class="number">3.5</span>;</span><br><span class="line">    <span class="type">double</span> c = <span class="number">2.7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显式类型转换</span></span><br><span class="line">    <span class="type">double</span> d = (<span class="type">double</span>)a + b;</span><br><span class="line">    <span class="type">int</span> e = (<span class="type">int</span>)c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d = %.2f\n&quot;</span>, d);  <span class="comment">// 输出：d = 13.50</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;e = %d\n&quot;</span>, e);    <span class="comment">// 输出：e = 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实际编程中，显式类型转换应谨慎使用，尤其是在可能导致数据丢失或精度下降的情况下。</p>
<h3 id="2-5-定义与声明"><a href="#2-5-定义与声明" class="headerlink" title="2.5 定义与声明"></a>2.5 定义与声明</h3><p>在调试时可以看到，程序并没有跑到变量那行代码，但是在变量监控时可以看到未被初始化的变量。这体现了定义和声明的区别。</p>
<p><strong>定义（Definition）</strong></p>
<p>定义是指在程序中首次创建一个变量、函数或类型的过程。定义不仅告诉编译器该实体的存在，而且还分配内存（对于变量和函数而言）并可能初始化该实体。定义通常包括完整的类型信息和实体的名称，对于变量还包括其初始值（如果有的话）。</p>
<p>变量定义示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;<span class="comment">//声明一个int类型的变量x</span></span><br><span class="line">x = <span class="number">10</span>;  <span class="comment">// 定义x的值为10</span></span><br></pre></td></tr></table></figure>
<p>函数定义示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;  <span class="comment">// 定义了一个名为add的函数，接受两个整型参数并返回它们的和</span></span><br></pre></td></tr></table></figure>
<p><strong>声明（Declaration）</strong></p>
<p>声明是指在程序中告知编译器某个实体的存在，而不一定创建或分配内存。声明可以让编译器知道一个变量或函数的类型，以便在后续代码中正确地使用它。声明通常出现在多个文件或函数之间，以便于链接和引用。</p>
<p>变量声明示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> x;  <span class="comment">// 声明一个外部的整型变量x，其定义在其他地方</span></span><br></pre></td></tr></table></figure>
<p>函数声明示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;  <span class="comment">// 声明一个名为add的函数，它接受两个整型参数并返回一个整型值</span></span><br></pre></td></tr></table></figure>
<p>区别总结</p>
<ul>
<li><strong>定义</strong>包含了声明的信息，并且为变量分配内存，对于函数则包含了函数体。</li>
<li><strong>声明</strong>仅提供信息，不分配内存，也不包含函数体。</li>
</ul>
<p>在C语言中，你可以在一个语句中同时进行声明和定义，但也可以分开进行。例如，你可以在一个头文件中声明函数，而在另一个源文件中定义它，这样可以实现模块化编程，提高代码的重用性和组织性。</p>
<p><strong>总之，分配内存的是定义，不分配内存的是声明</strong></p>
<p>理解声明和定义的概念有助于编写结构良好、可维护性强的程序，特别是在涉及多个源文件的大型项目中。</p>
<p>所以在写c语言时，如果函数比较多，可以在main函数前声明函数，在main函数后定义函数，提高代码的可读性。</p>
<p>在这里约定一个c语言从上到下的结构为：</p>
<ul>
<li>头文件防卫式声明</li>
<li>C语言库包含</li>
<li>三方库包含</li>
<li>自己写的头文件包含</li>
<li>结构体定义</li>
<li>全局变量</li>
<li>函数声明（如果函数比较短写定义）</li>
<li>main函数</li>
<li>函数定义</li>
</ul>
<h3 id="2-6-常量与变量"><a href="#2-6-常量与变量" class="headerlink" title="2.6 常量与变量"></a>2.6 常量与变量</h3><p><strong>变量</strong></p>
<p>变量是编程语言中用来存储数据的一个命名位置。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型，例如整型(int)、浮点型(float)、字符型(char)等。变量的声明通常看起来像这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age;  <span class="comment">// 声明一个整型变量age</span></span><br></pre></td></tr></table></figure>
<p>声明变量时，编译器会在内存中分配一段空间，这块空间的大小取决于变量的类型。变量的值可以在程序执行期间改变。例如，你可以为变量赋值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">age = <span class="number">25</span>;  <span class="comment">// 为变量age赋值为25</span></span><br></pre></td></tr></table></figure>
<p>或者在声明变量的同时初始化它：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">25</span>;  <span class="comment">// 声明并初始化变量age</span></span><br></pre></td></tr></table></figure>
<p><strong>常量</strong></p>
<p>C语言中有几种不同类型的常量，它们可以根据其数据类型和表示方式进行分类。在C语言中，常量可以分为以下几类：</p>
<ol>
<li><p><strong>整型常量（Integer Constants）</strong></p>
</li>
<li><p><strong>实型常量（Floating-point Constants）</strong></p>
</li>
<li><p><strong>字符常量（Character Constants）</strong></p>
</li>
<li><p><strong>字符串常量（String Constants）</strong></p>
<p>以上常量统称为字面值</p>
</li>
<li><p><strong>符号常量（Symbolic Constants）</strong></p>
<p>符号常量通常使用<code>#define</code>预处理器指令定义，可以为一个值赋予一个符号名称。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>枚举常量（Enum Constants）</strong>：</p>
<p>枚举类型定义了一组命名的整型常量，它们的值通常是递增的整数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span>red, green, blue&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>const常变量</strong></p>
<p>C语言中的常量可以是任何基本数据类型，如整型、浮点型、字符型或字符串字面值。使用<code>const</code>关键字还可以定义常变量，这是一种特殊的变量，其值在定义后不能被修改。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SIZE = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>一般定义元素大小，比如数组长度时也会用，<code>const</code>定义的常量在有些情况下不能使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> max=<span class="number">10</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> data1[max];<span class="comment">//error</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> val=<span class="number">2</span>*max;<span class="comment">//error</span></span><br></pre></td></tr></table></figure>
<h2 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a>3、数组</h2><p>数组是相同数据类型的数据集合，占据一块连续的内存空间。</p>
<p>确定一段内存需要两个参数，起始地址和偏移量。</p>
<p>一般学习指针都是从数组过度到指针。</p>
<h3 id="3-1-一维数组"><a href="#3-1-一维数组" class="headerlink" title="3.1 一维数组"></a>3.1 一维数组</h3><p>为了方便处理数据，把具有相同类型的若干变量按有序形式组织起来。数组是由一系列相同的元素组成的变量，本质是一段连续的内存空间</p>
<p><strong>初始化</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];<span class="comment">//不赋值，有些编译器会全部初始化为0，但是建议自动初始化。</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//最常用</span></span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//让编译器自己判断几个元素数组</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//数组指向的内存每一位赋值为0</span></span><br><span class="line"><span class="type">int</span> n=<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> arr[n];<span class="comment">//在C99标准前都要求使用常量，但是C99之后可以使用，不建议这样使用，如果数组长度不确定，建议在堆上创建可变长数组，防止栈溢出</span></span><br></pre></td></tr></table></figure>
<p>赋值，用循环赋值，注意索引是从0开始的，虽然<code>for(int i=1;i&lt;=n;i++)</code>容易理解，但更多语法规范使用<code>for(int i=0;i&lt;n;i++)</code>，所以要习惯理解并使用后面这种。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数组长度</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//20字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//4字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//5个</span></span><br></pre></td></tr></table></figure>
<p>数组下标越界会继续往内存中获取数据，但不一定所有内存都允许读取，编译器不会做越界检查，但是很多开发平台增加了越界检测。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line"></span><br><span class="line"><span class="number">000000000062F</span>E10</span><br><span class="line"><span class="number">000000000062F</span>E10<span class="comment">//数组名是一个常量，地址指向arr[0]</span></span><br><span class="line"><span class="number">000000000062F</span>E14</span><br><span class="line"><span class="number">000000000062F</span>E18<span class="comment">//数组是连续存储的</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>从地址可以证明数组是一段连续的内存。</p>
<h3 id="3-2-多维数组"><a href="#3-2-多维数组" class="headerlink" title="3.2 多维数组"></a>3.2 多维数组</h3><p>我们一般处理画面时是基于二维平面处理的，比如操场站队，会有行列的概念，而不是大家站成很长的一排。</p>
<p>初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">也可以这样写：</span></span><br><span class="line"><span class="comment">int arr[2][3]=&#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"><span class="comment">int arr[][3]=&#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"><span class="comment">不可以这样写：</span></span><br><span class="line"><span class="comment">int arr[2][]=&#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//内存中是连续的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//整个二维数组是24字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//一行数组12字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//一个值4字节</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//元素个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//行数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>])/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//三个值相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i][j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);i++)<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="keyword">sizeof</span>(arr[<span class="number">0</span>])/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]);j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i][j]);</span><br></pre></td></tr></table></figure>
<p>可以理解为2行3列；也可以理解为2个箱子，每个箱子装3个东西；标号都是从0开始</p>
<p>在内存中是先存放第一行再接着存放第二行，数组是连续存放的。</p>
<p>赋值使用两层循环</p>
<p><strong>多维数组</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="comment">//两层三行四列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，</span><br><span class="line">        <span class="number">5</span>，<span class="number">6</span>，<span class="number">7</span>，<span class="number">8</span>，</span><br><span class="line">        <span class="number">9</span>，<span class="number">10</span>，<span class="number">11</span>，<span class="number">12</span></span><br><span class="line">    &#125;，</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，</span><br><span class="line">        <span class="number">5</span>，<span class="number">6</span>，<span class="number">7</span>，<span class="number">8</span>，</span><br><span class="line">        <span class="number">9</span>，<span class="number">10</span>，<span class="number">11</span>，<span class="number">12</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组中的层可以不写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][j][k]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//数组大小96</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//一层大小48</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//一行大小12</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//一个大小4</span></span><br></pre></td></tr></table></figure>
<p>一般不会使用超过三维的数组，超过三维的数组会被结构成更低维度的数据。</p>
<h3 id="3-3-数组与指针"><a href="#3-3-数组与指针" class="headerlink" title="3.3 数组与指针"></a>3.3 数组与指针</h3><p>1、不能把数组名和指针等价理解，当数组名作参数时确实会退化成一个指向数组第一个值的地址的指针，但正常情况下数组还存储了数组长度的信息。</p>
<p>2、和数组一样，指针维度升一级就是二维指针,存放指针的指针，取地址符<code>&amp;</code>升维，解引用<code>*</code>降维</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>** p=arr;</span><br><span class="line">p[<span class="number">0</span>]等价于arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>3、 <code>*</code> <code>&amp;</code>  <code>[]</code> <code>-&gt;</code></p>
<p><code>*</code> <code>&amp;</code>这两个符号叫做叫间接运算符，参与对指针的处理。</p>
<p>取值运算符<code>*</code>对于指针来说，不是乘法，而且<code>*</code>的优先级比四则运算符号高，间接运算符的作用是取地址指向内存空间的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);<span class="comment">//*p=1</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>]等价于*(arr+<span class="number">1</span>);</span><br><span class="line">arr[<span class="number">0</span>]等价于*(arr+<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><code>&amp;</code>取址运算符获取变量的地址，从<code>scanf</code>函数中可以看出来</p>
<p>指针的加减意义为偏移，<code>arr+1</code>的作用是指针向后偏移一位，一位的大小取决于定义指针时数据类型的大小。</p>
<p><code>[]</code>也是一个关于索引很好的模型，在遇到比较难以理解的类似于起始点与偏移量的概念时可以进行参考</p>
<p><code>-&gt;</code>等价于<code>(*p).val</code>因为<code>.</code>的优先级高于<code>*</code>，为了减少括号的使用，用<code>-&gt;</code>代替</p>
<h2 id="4、指针"><a href="#4、指针" class="headerlink" title="4、指针"></a>4、指针</h2><p><a href="https://zhuanlan.zhihu.com/p/101934152">C语言重点——指针篇（一篇让你完全搞懂指针） - 知乎 (zhihu.com)</a></p>
<p>指针其实很简单，理解这几个概念即可。</p>
<p>1、可以把<code>&lt;数据类型&gt;*</code>看做是一类数据类型，这类数据类型的长度由字长决定，64位的计算机地址为64位，所有的指针所占内存的大小相等</p>
<p>指针占操作系统对应的位数，64位的系统指针占8个字节的内存，一个字节对应一个地址，所以指针对应分配8个地址，指针地址取首地址；不同类型数据的指针对地址分配没影响，因为指针只存储地址，也就是无符号的十六进制整型数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">bool</span>*));</span><br><span class="line"><span class="comment">//输出的结果都是8，因为我这是64位计算机，64位等于8字节</span></span><br></pre></td></tr></table></figure>
<p>2、指针变量存放的是地址，可以通过<code>*</code>处理该地址中的数据</p>
<p>3、指针变量本身是一段内存，它有自己的地址</p>
<h3 id="4-1-指针变量"><a href="#4-1-指针变量" class="headerlink" title="4.1 指针变量"></a>4.1 指针变量</h3><p>每一个字节的内存都被分配一个地址，指针变量用来存储一段内存的首地址，它的数据类型指明内存的长度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">arr=<span class="number">100</span><span class="comment">//err,数组名是一个常量,不允许赋值</span></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p=arr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,p);<span class="comment">//结果相同</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);<span class="comment">//这里可以看到结果是arr[0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[i]);<span class="comment">//可以看到输出的结果一致</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>利用指针可以简单实现字符串的拷贝</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span>* dest,<span class="type">char</span>* ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        dest[i]=ch[i],i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">my_strcpy1</span><span class="params">(<span class="type">char</span>* dest,<span class="type">char</span>* ch)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*(ch+i))</span><br><span class="line">    &#123;</span><br><span class="line">        *(dest+i)=*(ch+i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">my_strcpy2</span><span class="params">(<span class="type">char</span>* dest,<span class="type">char</span>* ch)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(*ch)</span><br><span class="line">    &#123;</span><br><span class="line">        *dest++=*ch++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">my_strcpy2</span><span class="params">(<span class="type">char</span>* dest,<span class="type">char</span>* ch)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>( *dest++=*ch++);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一步：取值*ch，*dest</span></span><br><span class="line"><span class="comment">    第二步：赋值*dest=*ch</span></span><br><span class="line"><span class="comment">    第三步：表达式*dest=*ch返回ch的ascii值，如果不是字符串结尾&#x27;\0&#x27;,则为true，进入下一轮循环</span></span><br><span class="line"><span class="comment">    第四步： 指针偏移dest++,ch++</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> ch1[]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> dest[<span class="number">100</span>];</span><br><span class="line">my_strcpy(dest,ch1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-指针运算"><a href="#4-2-指针运算" class="headerlink" title="4.2 指针运算"></a>4.2 指针运算</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span>* p=arr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=p+arr;<span class="comment">//err，指针相加没有意义的野指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> step=p-arr;<span class="comment">//值为0；相减是步长，值为（p的地址-arr的地址）/sizeof(int);</span></span><br><span class="line"></span><br><span class="line">p=p*arr;<span class="comment">//没有意义的野指针</span></span><br><span class="line">p=p*<span class="number">4</span>;<span class="comment">//同理</span></span><br><span class="line"></span><br><span class="line">p=p/arr;<span class="comment">//err</span></span><br><span class="line">p=p%<span class="number">4</span>;<span class="comment">//err</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移右移也没有意义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逻辑运算符有意义</span></span><br><span class="line"><span class="type">bool</span> a=(p==arr);<span class="comment">//值为真</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-指针数组与数组指针"><a href="#4-3-指针数组与数组指针" class="headerlink" title="4.3 指针数组与数组指针"></a>4.3 <strong>指针数组与数组指针</strong></h3><p>在C语言程序中，数组名代表的是数组首个元素的地址。这意味着数组名本身不是一个常规的变量，它并不存储数组元素的值，而是存储着数组第一个元素在内存中的地址。因此，数组名可以被看作是一个常量指针，指向数组类型对应的元素类型，并且这个指针是不可修改的。</p>
<p>具体来说：</p>
<ul>
<li>当你写下 <code>int arr[10];</code>，<code>arr</code> 就是指向数组中第一个 <code>int</code> 类型元素的地址。</li>
<li>使用 <code>arr</code> 作为函数参数时，它通常会被隐式转换为一个指向数组首元素的指针，例如 <code>void func(int *ptr)</code>，调用 <code>func(arr)</code> 时，<code>arr</code> 传递的就是这样一个指针。</li>
<li>使用 <code>sizeof(arr)</code> 时，它会返回整个数组占用的字节数，这是因为 <code>sizeof</code> 是一个编译时操作，它知道数组的实际大小。</li>
<li>如果你在数组名前加上取地址运算符 <code>&amp;</code>，如 <code>&amp;arr</code>，这将得到整个数组的地址，而不是首元素的地址，但这在实践中的用法较少，因为通常我们直接使用数组名就能获得首元素地址来操作数组。</li>
</ul>
<p>简而言之，数组名在C语言程序中主要扮演两个角色：作为指向数组首元素的地址和在某些上下文中代表整个数组的特性（如在 <code>sizeof</code> 操作中）。</p>
<p>指针数组存储指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>,c=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span>* arr[<span class="number">3</span>]=&#123;&amp;a,&amp;b,&amp;c&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*arr[<span class="number">1</span>]);<span class="comment">//值为20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span>* arr[]=&#123;a,b,c&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//值为2，指针数组是一个特殊的二维数组模型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,&amp;arr[<span class="number">0</span>]);<span class="comment">//这两行都是指针数组的首地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,a);<span class="comment">//这是a数组的首地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i][j]);<span class="comment">//等价于*(arr[i]+j)，等价于*（*（arr+i)+j)，对应二级指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>多级指针</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> c[]=&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span>* arr[]=&#123;a,b,c&#125;;</span><br><span class="line"><span class="type">int</span>** p=arr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,**p);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,**(p+<span class="number">1</span>));<span class="comment">//二级指针偏移量加1相当于移动一行，值为4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(*p+<span class="number">1</span>));<span class="comment">//*p为arr的地址，arr地址加偏移一位指向2的地址，然后作取值，结果为2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(*(p+<span class="number">1</span>)+<span class="number">1</span>));<span class="comment">//取值后二级指针降阶为一级指针，二级指针偏移（p+1）一行后，再偏移一位，指向5，作取值结果为5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i][j]);</span><br></pre></td></tr></table></figure>
<p>难点在于区分指针地址本身的地址和指针地址存储的地址,取值降阶，取地址升阶，取地址只能作一次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p=&amp;a;</span><br><span class="line"><span class="type">int</span>** pp=&amp;p;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;pp是二级指针pp的地址</span></span><br><span class="line"><span class="comment">pp为指针变量，存储一个地址，这里存的是p的地址，pp=&amp;p</span></span><br><span class="line"><span class="comment">*pp取值符*取出pp对应的地址的值,*pp=p</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&amp;p存储一级指针p的地址</span></span><br><span class="line"><span class="comment">p变量存储a的地址</span></span><br><span class="line"><span class="comment">*p取出p变量存储的地址对应的变量a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*pp=p,**pp=*p=a,**pp=20等价于a=20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-数据保护"><a href="#4-4-数据保护" class="headerlink" title="4.4 数据保护"></a>4.4 数据保护</h3><p>空指针和野指针</p>
<p>指针变量也是变量，允许赋值，取值范围在0——2^64-1</p>
<p>野指针：指针变量指向一个未知的空间</p>
<p>系统0——255系统不允许访问</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p=<span class="number">1000</span>;<span class="comment">//野指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);<span class="comment">//可能报错</span></span><br><span class="line">p=<span class="literal">NULL</span>;<span class="comment">//指向空指针后*p报错</span></span><br><span class="line">p=(<span class="type">void</span>*)<span class="number">0</span>;<span class="comment">//这是系统宏定义里的空指针定义</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);<span class="comment">//指向0，不允许访问</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>万能指针，这也为c++模版的实现提供支撑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p=&amp;a;</span><br><span class="line"><span class="type">void</span>* p1=&amp;a;<span class="comment">//可以接收任意类型变量的内存地址</span></span><br><span class="line">*p1=<span class="number">100</span>;<span class="comment">//报错，万能指针要修改变量时要转换成相应的数据类型</span></span><br><span class="line">*(<span class="type">int</span>*)p1=<span class="number">100</span>;<span class="comment">//a的值为变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">void</span>*));<span class="comment">//依旧是和系统有关</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针好用但是也危险，为了防止改变有用的数据，不用的指针应当指向NULL</span></span><br><span class="line"><span class="type">int</span>* p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//指针要防止越界</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-指针常量与常量指针"><a href="#4-5-指针常量与常量指针" class="headerlink" title="4.5 指针常量与常量指针"></a>4.5 指针常量与常量指针</h3><p>在C语言中，“指针常量”和“常量指针”是两种不同的概念，它们的差别在于哪个部分被标记为常量，以及这种标记如何限制指针的使用。下面详细解释这两种类型：</p>
<ol>
<li><p><strong>指针常量</strong>（Pointer to a constant）:<br>当你声明一个“指针常量”，实际上是指针本身的值（即它指向的内存地址）是常量，也就是说，一旦指针被初始化指向一个地址，就不能再指向另一个地址。这通常表示为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *ptr; <span class="comment">// ptr 是一个指向常量 int 的指针</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，<code>*ptr</code> 表示的值不能被修改，但 <code>ptr</code> 自身可以指向其他的地址。换句话说，<code>*ptr</code> 是常量，但 <code>ptr</code> 可以重新赋值。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *ptr = &amp;someInt;</span><br><span class="line">*ptr = <span class="number">10</span>; <span class="comment">// 错误，*ptr 是常量</span></span><br><span class="line">ptr = &amp;anotherInt; <span class="comment">// 正确，ptr 可以重新指向其他地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>常量指针</strong>（Constant pointer）:<br>“常量指针”则是指指针变量自身是一个常量，这意味着一旦指针被初始化，其值（即它指向的地址）就不能改变。这通常表示为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> ptr = &amp;someInt; <span class="comment">// ptr 是一个指向 int 的常量指针</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，<code>ptr</code> 不能被重新赋值以指向另一个地址，但是 <code>*ptr</code> 的值是可以改变的。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> someInt = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> ptr = &amp;someInt;</span><br><span class="line">*ptr = <span class="number">10</span>; <span class="comment">// 正确，*ptr 的值可以改变</span></span><br><span class="line">ptr = &amp;anotherInt; <span class="comment">// 错误，ptr 是常量，不能重新赋值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>混合使用</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> ptr = &amp;someInt; </span><br></pre></td></tr></table></figure>
<p>既不能改变<code>*ptr</code>的值，也不能改变<code>ptr</code>指向的地址</p>
</li>
</ol>
<p>总结：</p>
<ul>
<li><strong>指针常量</strong> (<code>const int *ptr</code>)：<code>ptr</code> 可以重新赋值，但 <code>*ptr</code> 不能被修改。</li>
<li><strong>常量指针</strong> (<code>int *const ptr</code>)：<code>ptr</code> 不能被重新赋值，但 <code>*ptr</code> 的值可以改变。</li>
</ul>
<p>使用这些类型的指针可以增加代码的安全性和效率，因为它们可以防止意外的修改，同时让编译器优化代码。在设计函数接口时，使用指针常量可以表明函数不会修改传入的指针所指向的数据，而使用常量指针则可以表明函数将始终使用相同的指针地址。</p>
<p>记忆：</p>
<p><code>*str</code>是一个值，<code>const</code>在这个值前面，这个值就不能修改</p>
<p><code>str</code>是一个地址，<code>const</code>在这个地址前面，这个地址就不能修改，也就是指针不能指向其他值</p>
<h2 id="5、自定义数据"><a href="#5、自定义数据" class="headerlink" title="5、自定义数据"></a>5、自定义数据</h2><h3 id="5-1-结构体struct"><a href="#5-1-结构体struct" class="headerlink" title="5.1 结构体struct"></a>5.1 结构体<code>struct</code></h3><p>数组是一组具有相同类型数据的有序集合，用于处理大量相同类型的数据运算。</p>
<p>如果要记录一个班级所有学生的学号，性别，年龄，地址等，所有都单独定义很麻烦。</p>
<p>为了方便存储有较强联系的多个数组的数据，使用结构体把数组整合成一个有机的整体。</p>
<p><strong>可以把数组看成是结构体的特例</strong></p>
<p>简单写一个学生的学号和姓名的结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>  <span class="title">stu</span>[2]=</span>&#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n%s&quot;</span>,stu[<span class="number">0</span>].id,stu[<span class="number">0</span>].name);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>上面使用的是列表初始化，当然也可以用<code>for</code>循环赋值</p>
<p>数组可以有多维数组，结构体相对应有多层嵌套：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> id; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> stu_num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">stu</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>结构体数组大小</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(student));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(student));</span><br></pre></td></tr></table></figure>
<p>结构体有偏移对齐，会以最大的数据类型为单位，10字节的字符数组会多留两位，变成sizeof(int)的倍数</p>
<p>具体偏移的情况还是得看操作系统。</p>
<p><strong>交换结构体的数据</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">temp</span>;</span></span><br><span class="line">temp=student[<span class="number">0</span>];</span><br><span class="line">student[<span class="number">0</span>]=student[<span class="number">1</span>];</span><br><span class="line">student[<span class="number">1</span>]=temp;</span><br></pre></td></tr></table></figure>
<p><strong>结构体指针</strong></p>
<p><strong>可以把<code>struct student</code>看成和<code>int</code>、<code>char</code>一样的数据结构，同样的，可以使用指向结构体的指针，指针长度均为字长</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu1</span>=</span>&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>* <span class="title">ptr_s</span>=</span>&amp;stu1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,stu1.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,stu1.age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ptr_s-&gt;name);<span class="comment">//ptr_s-&gt;name 等价与 (*ptr_s).name</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ptr_s-&gt;age);</span><br></pre></td></tr></table></figure>
<h3 id="5-2-共用体union"><a href="#5-2-共用体union" class="headerlink" title="5.2 共用体union"></a><strong>5.2 共用体<code>union</code></strong></h3><p>在平时生活中，有公共设施，用较少的占地满足尽量多的居民的休闲需求。又比如去一个地方旅游几天，不可能为了过夜买个房子，而是选择租宾馆房间。</p>
<p>对于内存，也能通过设置“公共空间”的方式节省内存，C语言有一种数据类型Union（共用体，也叫联合体），能够存储不同类型的数据，共用体<code>union</code>有以下几个特征：</p>
<p>1、为了满足数据类型最长的成员使用，共用体内存为最大数据类型的倍数</p>
<p>2、在某一时刻，只允许存放一个成员的数据</p>
<p>3、新成员数据的加入会覆盖原来成员的值</p>
<p>4、共用体变量的地址和其他成员地址是同一个</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="class"><span class="keyword">union</span> <span class="title">var</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">var</span> <span class="title">un</span>;</span></span><br><span class="line">    un.a=<span class="number">1</span>;</span><br><span class="line">    un.b=<span class="number">1.1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,un.a);<span class="comment">//被覆盖，输出乱码</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,un.b);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(var));<span class="comment">//最大的数据类型是double，union以8个字节为一个单位，为了满足ch[10],内存为16 </span></span><br><span class="line">      </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;un);</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;un.a);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,un.ch);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;un.b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="5-3-枚举enum"><a href="#5-3-枚举enum" class="headerlink" title="5.3 枚举enum"></a><strong>5.3 枚举<code>enum</code></strong></h3><p>在设置常量时，会使用<code>#define</code>来设置，但是如果常量很多，头文件就会显得很臃肿。C语言提供枚举类型<code>enum</code>解决这个问题，但是要注意#dfefine是直接替换文本，enum实则是参数传递</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MON  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TUE  2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WED  3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THU  4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRI  5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAT  6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUN  7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上述可写作</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是要注意的是枚举是从0开始赋值的，且下一个值是由上一个值递增赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON, TUE=<span class="number">2</span>, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义不会往回走，所以MON的值为0，但是后面的天数和星期数是对应的</span></span><br></pre></td></tr></table></figure>
<p>枚举经常和<code>switch</code>一起用，这个比较新，可能很多编译器不适用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">em_color</span>&#123;</span>red,blue,yellow&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* colors[]=&#123;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">em_color</span> <span class="title">color</span>;</span></span><br><span class="line"><span class="type">char</span> choice[<span class="number">10</span>];</span><br><span class="line">gets(choice);</span><br><span class="line"><span class="keyword">for</span>(color=red;color&lt;=yellow;color++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(choice,colors[color])==<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(color)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">case</span> red: <span class="built_in">puts</span>(<span class="string">&quot;it is red&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> blue: <span class="built_in">puts</span>(<span class="string">&quot;it is blue&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> yellow: <span class="built_in">puts</span>(<span class="string">&quot;it is yellow&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>: <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="5-4-typedef"><a href="#5-4-typedef" class="headerlink" title="5.4 typedef"></a>5.4 typedef</h3><p>前面提到，可以把<code>struct student</code>、<code>union var</code>、<code>enum DAY</code>看成是数据类型，但是有时感觉两个单词组成的数据类型太别扭，C语言提供数据类型命名<code>typedef</code>给数据类型取别名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line">student stu1;<span class="comment">//这里可以直接用student表示struct student，当然也可以取其他名字</span></span><br></pre></td></tr></table></figure>
<p>可能会觉得取别名多此一举，但是这能<strong>提高代码的简洁性和可读性</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student)*<span class="number">2</span>);</span><br><span class="line"><span class="comment">//开辟两个结构体大小的堆空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line">stu* p =(stu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stu)*<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>可以<strong>取多个别名</strong>，一般会再写一个指针，方便做调用函数的地址传递</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;stu,*ss;</span><br><span class="line"><span class="comment">//`*s`等价于`struct student`</span></span><br><span class="line"><span class="comment">//所以`s`等价于`struct student*`</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStudent</span><span class="params">(<span class="keyword">struct</span> student* studnet)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initStudent</span><span class="params">(stu* studnet)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initStudent</span><span class="params">(s student)</span>;</span><br><span class="line"><span class="comment">//上面三个函数是等价的</span></span><br></pre></td></tr></table></figure>
<p>可以用<code>typedef</code>像处理结构一样处理函数指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*fun)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="comment">//这里相当于定义了一个名为fun的数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fun p;<span class="comment">//等价于 int(*p)(int,int);</span></span><br><span class="line">    p=add;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、define"><a href="#6、define" class="headerlink" title="6、define"></a>6、define</h2><h3 id="6-1-头文件防卫式声明"><a href="#6-1-头文件防卫式声明" class="headerlink" title="6.1 头文件防卫式声明"></a>6.1 头文件防卫式声明</h3><p><code>inlcude</code>头文件包含，预处理时将头文件的内容copy到对应的位置</p>
<p>既能包含库函数，也能包含自己写的头文件。</p>
<p>head1.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br></pre></td></tr></table></figure>
<p>head2.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;head1&quot;</span></span></span><br><span class="line"><span class="type">int</span> c;</span><br></pre></td></tr></table></figure>
<p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;head1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;head2.h&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>在上述程序中，很显然存在重定义部分,在head2中包含了head1,所以main函数包含了两次head1</p>
<p>head2.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HEAD2_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HEAD2_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;head1&quot;</span></span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这样就不会重复包含，系统有很多宏定义的量，比如<code>__TIME__</code>表示编译代码的时间，基本都是两个下划线一组，把内容包含在里面。为了区分，建议个人的方位式声明命名规则参考<code>head2.h</code>与<code>_HEAD2_H_</code></p>
<h3 id="6-2-宏定义"><a href="#6-2-宏定义" class="headerlink" title="6.2 宏定义"></a>6.2 宏定义</h3><p>宏定义,只做简单的文本替换，本质上是用空间换时间</p>
<ul>
<li><strong>明示常量</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.14</span></span><br></pre></td></tr></table></figure>
<p>这里就用<code>pi</code>代替了3.14，其中<code>pi</code>称为宏，<code>3.14</code>称为替换体，定义的过程也叫宏定义，常用的常量会通过宏定义修改，方便修改。</p>
<ul>
<li>宏函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  Fun(x) 1+x+x*x</span></span><br><span class="line"><span class="comment">//如果后面接乘法，只乘最后一部分，所以应当加上括号</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  Fun(x) (1+x+x*x)</span></span><br><span class="line"><span class="comment">//如果x是一个表达式，比如x=a+b里面也会出现这种问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  Fun(x) (1+(x)+(x)*(x))</span></span><br><span class="line"><span class="comment">//还要避免多次副作用，比如表达式中的x为++i</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fun() printf(<span class="string">&quot;hello\n&quot;</span>);\</span></span><br><span class="line"><span class="meta">printf(<span class="string">&quot;world\n&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line">    fun();</span><br><span class="line"><span class="comment">//这样会丢失一部分，可以加大括号，但是函数习惯加分号，显然会出现问题</span></span><br><span class="line"><span class="comment">//改为do while</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fun() do&#123;printf(<span class="string">&quot;hello\n&quot;</span>);\</span></span><br><span class="line"><span class="meta">printf(<span class="string">&quot;world\n&quot;</span>);&#125;while(0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相比于函数调用，宏定义的效率很高，因为是直接替换的</p>
<ul>
<li>宏定义支持嵌套</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> one 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> two one+one</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,two);<span class="comment">//输出2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设置快捷指令</li>
</ul>
<p>注意：旧一点的编译器可能不支持</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HW printf(<span class="string">&quot;hello world&quot;</span>)</span></span><br><span class="line">HW;</span><br></pre></td></tr></table></figure>
<p>可以感受到宏定义是直接替换字符，所以可以产生很多骚操作，可以把程序的一部分内容抽出来放在宏定义里面，提高安全性。</p>
]]></content>
      <categories>
        <category>语法基础</category>
      </categories>
      <tags>
        <tag>C语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C基础_入门</title>
    <url>/posts/59f9c032/</url>
    <content><![CDATA[<p>C语言是绝大多数人计算机学习接触的第一门计算机语言，也是最接近底层的高级语言。</p>
<p>学好C语言可以为编程学习打下坚实的基础。</p>
<p>本文内容包括：</p>
<ul>
<li>认识C语言</li>
<li>编译环境的搭建</li>
<li><code>hello world</code></li>
<li>程序编译过程</li>
</ul>
<span id="more"></span>
<h3 id="1、认识C语言"><a href="#1、认识C语言" class="headerlink" title="1、认识C语言"></a>1、认识C语言</h3><h4 id="1-1-什么是C语言"><a href="#1-1-什么是C语言" class="headerlink" title="1.1 什么是C语言"></a>1.1 <strong>什么是C语言</strong></h4><p>语言是交流的工具，C语言则是人和计算机进行交互的工具。</p>
<p>计算机进行操作时是通过变换存储的“0”、“1”实现的，这种“0”、“1”组成的语言叫做<strong>机器语言</strong>，最直接反应计算机的运算过程，但数据过于庞大，交互效率很低。</p>
<p>把重复的一些机器语言组合起来，形成<strong>指令集</strong>，这样一个指令集就可以代表一大串机器语言，这种指令集叫做组合语言，或者是汇编语言。利用组译器（Assembler）把汇编语言转换为计算机认识的机器语言。</p>
<p>汇编语言是各种指令的集合，在实际使用时，很难读懂各个指令之间的联系和逻辑。这个时候就发明了<strong>高级语言</strong>，高级语言接近我们日常使用的语言，通过语法规范形成计算机可以解读的语言。通过编译器（Compiler）把高级语言转换为汇编语言。</p>
<p>C语言就是一种高级语言。</p>
<h4 id="1-2-C与Unix"><a href="#1-2-C与Unix" class="headerlink" title="1.2 C与Unix"></a>1.2 C与Unix</h4><p>人物：<strong>Dinnish Ritch</strong>          <strong>Ken Thempson</strong></p>
<p>两人均在CAT&amp;T的Bell实验室工作，ken Thempson用汇编编写了一个游戏<code>Space Travel</code></p>
<p>但当时在每台设备上安装这个游戏都需要进行专门的调试，为了解决这个问题，ken Thempson编写了一个简单的操作系统，也就是<code>Unix</code>的雏形。</p>
<p>后来，ken Thempson和Dennis Ritchie基于<code>BCPL</code>开发了一种名为B语言的程序设计语言，用于开发<code>Unix</code>工具。</p>
<p>Dinnish Ritch对B语言进行优化，开发出了C语言。随后，<code>Unix</code>的大部分代码被重写为C语言，这使得Unix更加模块化，易于移植到不同的硬件平台上,C语言也随着Unix的火爆一起流传。</p>
<h4 id="1-3-语言特色"><a href="#1-3-语言特色" class="headerlink" title="1.3 语言特色"></a>1.3 语言特色</h4><p>C语言并不是唯一的高级语言，相比于其他语言，C语言的特点是什么。</p>
<p><strong>优点</strong></p>
<ul>
<li>设计特性：C语言是面向过程的语言，它的设计理念让用户能轻松的完成自顶向下的规划、结构化编程和模块化设计</li>
<li>高效性：C语言具有汇编语言才有的微调控制能力，可以处理底层的活动</li>
<li>可移植性：UNIX系统把C编译器作为软件包的一部分，很多系统继承UNIX也加入了C编译器</li>
<li>强大而灵活：能实现很多功能，很多语言的编译器甚至是C语言写的</li>
<li>面向程序员：给使用者权限更大，比如访问硬件、控制操作内存中的位</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>解读难度较大</li>
</ul>
<p><strong>补充</strong></p>
<p>可以通过查看<code>tiobe</code>指数查看各种语言在it行业的使用占比</p>
<h4 id="1-4-应用范围"><a href="#1-4-应用范围" class="headerlink" title="1.4 应用范围"></a><strong>1.4 应用范围</strong></h4><p>C语言的应用范围非常广泛，包括但不限于以下几个方面：</p>
<ol>
<li><p><strong>系统编程</strong>：C语言最初是为了编写UNIX操作系统而设计的，因此非常适合于系统级别的编程，如设备驱动、内核模块、系统管理工具等。</p>
</li>
<li><p><strong>嵌入式系统</strong>：C语言的高效性和对底层硬件的直接访问能力使其成为开发嵌入式系统的首选语言，如微控制器程序、物联网(IoT)设备、汽车电子控制单元(ECU)等。</p>
</li>
<li><p><strong>游戏开发</strong>：虽然现代游戏引擎可能更多地使用C++，但C语言在游戏开发中仍然有其一席之地，尤其是在性能敏感的部分，如图形渲染、物理模拟等。</p>
</li>
<li><p><strong>软件开发</strong>：许多大型软件项目，尤其是那些对性能要求极高的应用程序，都大量使用C语言，如数据库管理系统、编译器、解释器、网络服务器等。</p>
</li>
<li><p><strong>图形和多媒体</strong>：虽然现在有各种高级的图形库和框架，但在底层图形处理和多媒体应用中，C语言仍然是不可或缺的，例如音频和视频编码/解码库。</p>
</li>
<li><p><strong>教育和学习</strong>：C语言是学习编程和计算机科学原理的基础，许多计算机科学课程都将其作为入门语言教授，因为它帮助学生理解内存管理、指针、数据结构等核心概念。</p>
</li>
<li><p><strong>科学计算和工程</strong>：在需要高性能数值计算的领域，如物理学、化学、生物学、经济学等，C语言被广泛用于开发科学计算软件和工程仿真模型。</p>
</li>
<li><p><strong>安全和加密</strong>：C语言在开发安全相关的软件，如密码学库、防火墙、入侵检测系统等方面有广泛应用。</p>
</li>
<li><p><strong>实时系统</strong>：C语言在实时系统中非常有用，因为它提供了对时间的精确控制，这对于航空、航天、军事和其他需要严格时间响应的领域至关重要。</p>
</li>
</ol>
<p>总之，C语言因其高效、灵活和强大而成为众多领域的首选编程语言，几乎在所有的计算机平台和应用领域都有它的身影。</p>
<h4 id="1-5-C语言标准"><a href="#1-5-C语言标准" class="headerlink" title="1.5 C语言标准"></a><strong>1.5 C语言标准</strong></h4><p>制定统一标准是为了让C语言代码在不同机器中都能执行，如果一个厂商一个标准就很难实现可移植性。</p>
<ol>
<li><p>1972年C语⾔在⻉尔实验室诞⽣. 丹尼斯·⾥奇 参考B语⾔开发.</p>
</li>
<li><p>1970-80年代，C语⾔被⼴泛应⽤，产⽣很多不同的C语⾔版本. 程序可移植性⽐较差.</p>
</li>
<li><p>1983年，美国国家标准委员会(ANSI) 成⽴⼀个⼩组来制定C语⾔的标准. C语⾔⽀持哪些语法、⽀持哪些功能<br>等等.</p>
</li>
<li><p>1989年，通过了C语⾔的第⼀个标准. C89标准.</p>
</li>
<li><p>1990年，国际标准化组织(ISO) 和 国际电⼯委员会(IEC) 将 C89标准当做国际的C语⾔标准. C90标准. C89和<br>C90指的是同⼀个标准</p>
</li>
<li><p>1994年 ISO和 IEC 对 C89标准进⾏修订. C94标准. 由于并没有增加新的语法特性，还是叫做 C89或者C90.</p>
</li>
<li><p>1995年 ISO和IEC再次做了修正，C95 标准.</p>
</li>
<li><p>1999年 ISO 和 IEC 发布了C语⾔新标准. C语⾔第⼆个标准. 在该标准中，新增许多实⽤的C语⾔语法特性. 增<br>加新的关键字、可变⻓数组等等. <strong>C99标准</strong></p>
</li>
<li><p>2007年，重新修订了C语⾔.</p>
</li>
<li><p>2011年， 发布新的版本。新增了⼀些语法，泛型、国际化⽀持. ⽬前为⽌最新版本是 <strong>C11.</strong></p>
<p>目前（2024）最常用的标准是C99标准</p>
</li>
</ol>
<h3 id="2、搭建编译环境"><a href="#2、搭建编译环境" class="headerlink" title="2、搭建编译环境"></a>2、搭建编译环境</h3><h4 id="2-1-linux"><a href="#2-1-linux" class="headerlink" title="2.1 linux"></a><strong>2.1 linux</strong></h4><p>推荐在linux中学习C语言</p>
<p>   1、插件安装</p>
<p>C/C++ Extension Pack   (C/C++扩展包，下载直接安装，它包含了 vscode 编写 C/C++ 工程需要的插件（C/C++、C/C++ Themes、CMake、CMake Tools和Better C++ Syntax等）)</p>
<p>Chinese (Simplified) (简体中文) Language</p>
<p>2、Code Runner</p>
<h4 id="2-2-windows"><a href="#2-2-windows" class="headerlink" title="2.2 windows"></a><strong>2.2 windows</strong></h4><p>参考文章：<a href="https://blog.csdn.net/m0_62721576/article/details/127207028">https://blog.csdn.net/m0_62721576/article/details/127207028</a></p>
<p>一般使用visual studio这个IDE进行程序编写</p>
<p>这里试着用visual studio code学习C语言，因为用这个轻量级的软件可以方便学习算法，写语法demo。如果要构架工程文件的话还是在visual studio中进行</p>
<p>1、安装MING</p>
<p><a href="https://nuwen.net/mingw.html">https://nuwen.net/mingw.html</a></p>
<p>下载exe文件</p>
<p><img src="/assets/C_Basics/ming_download.png" alt="ming_download"></p>
<p>安装MING到英文路径中,中文路径可能会出现问题</p>
<p>2、把MING的bin文文件夹路径添加到环境变量PATH中</p>
<p>在CMD中测试是否配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br></pre></td></tr></table></figure>
<p>3、安装VScode插件</p>
<ul>
<li>C/C++ microsoft</li>
<li>C/C++ Extension Pack</li>
<li>C++ Themes</li>
</ul>
<p>4、json（附加）</p>
<p>如果没有正确生成json文件，可以参考一面配置手动修改json文件</p>
<p><code>c_cpp_properties.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.18362.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/MinGW/bin/g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-x64&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>launch.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>settings.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.py&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unordered_map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deque&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdio.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;algorithm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;atomic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;concepts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cstring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ctime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iterator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;memory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;random&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;set&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tuple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xfacet&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xiosbase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xlocnum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xmemory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xstring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xtr1common&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xtree&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xutility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stdlib.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;string.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aiXcoder.showTrayIcon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>tasks.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>5、在设置里打开run in terminal</p>
<h3 id="3、hello-world"><a href="#3、hello-world" class="headerlink" title="3、hello world"></a>3、<code>hello world</code></h3><p>在屏幕上输出<code>hello world</code>是一个最简单的C语言程序</p>
<p>C语言示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);<span class="comment">//第一个C语言程序</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//0一般是状态码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><code>#</code>这是预处理符，这个符号的作用是把头文件展开</p>
<p><code>include&lt;stdio.h&gt;</code>意为stdio.h这个标准输入输出头文件包含在这个程序中，在编译时头文件被展开</p>
<p>2、函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数可以理解为工具，放在仓库里，而stdio.h就可以理解为仓库，如果找不到仓库就没有办法使用工具。</p>
<p>有些工具是常用的，不放在库里，比如main函数和system函数。而printf函数是stdio.h库中的工具，所以要加入到头文件中。</p>
<p>函数有标准的格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;数据类型&gt; 函数名 (参数)&#123;</span><br><span class="line">函数主体</span><br><span class="line"><span class="keyword">return</span> &lt;返回值&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、main函数</p>
<p>main函数要特殊注意，main函数在C语言程序只有一个，并且程序是从main函数开始执行，到main函数返回返回值结束。</p>
<p>4、注释</p>
<p>注释在预处理阶段会被删除，注释是方便阅读和修改代码写的，平时写注释时一定要有自己的一套注释规范，节约开发时间</p>
<p><code>//</code>行注释，注释从<code>//</code>开始的一行</p>
<p><code>/*</code>&lt;内容&gt;<code>*/</code>内容被注释</p>
<h3 id="4、程序编译过程"><a href="#4、程序编译过程" class="headerlink" title="4、程序编译过程"></a>4、程序编译过程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim a.c#写一个hello world</span><br><span class="line">gcc -E a.c -o a.i#预处理</span><br><span class="line">gcc -S a.i -o a.s#编译，生成a.s汇编文件</span><br><span class="line">gcc -c a.s -o a.o#汇编，生成a.o(obj)目标文件</span><br><span class="line">gcc a.o -o a.exe#链接，生成可执行文件a.exe</span><br><span class="line">./a.exe#执行程序</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>使用编辑器编写源代码</strong> (<code>vim a.c</code>)</li>
<li><strong>预处理</strong> (<code>gcc -E a.c -o a.i</code>)<ul>
<li>在预处理阶段，GCC（GNU Compiler Collection）中的预处理器会读取你的源代码文件<code>a.c</code>，处理其中的所有预处理器指令，做头文件展开。</li>
<li><code>#define</code>定义宏定义展开。</li>
<li>经过预处理后，会生成一个名为<code>a.i</code>的文件。</li>
</ul>
</li>
<li><strong>编译</strong> (<code>gcc -S a.i -o a.s</code>)<ul>
<li>编译阶段，GCC的C编译器会读取预处理后的源代码<code>a.i</code>，将其转换成汇编代码。</li>
<li>结果会保存在<code>a.s</code>文件中，这是程序的汇编语言版本。</li>
</ul>
</li>
<li><strong>汇编</strong> (<code>gcc -c a.s -o a.o</code>)<ul>
<li>汇编阶段，GCC的汇编器将<code>a.s</code>文件中的汇编代码转换成机器语言，生成一个目标文件<code>a.o</code>。</li>
<li>目标文件是一个二进制文件，包含了可以被链接器使用的机器语言指令和数据。</li>
</ul>
</li>
<li><strong>链接</strong> (<code>gcc a.o -o a.exe</code>) <ul>
<li>链接阶段，GCC的链接器会将一个或多个目标文件以及可能需要的库文件链接在一起，生成最终的可执行文件<code>a.exe</code>。</li>
<li>链接器负责解决程序中未解析的符号引用，确保所有的函数和数据都有正确的地址。</li>
</ul>
</li>
<li><strong>执行程序</strong> (<code>./a.exe</code>)<ul>
<li>最后，你可以通过运行<code>a.exe</code>来执行你的程序。操作系统会加载这个可执行文件到内存中，设置好环境，并启动程序的执行。</li>
<li>在window中一般使用<code>.\a.exe</code></li>
</ul>
</li>
</ol>
<p>也可以全部一步编译，以上只是方理解每一步的编译过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc a.c -o a.exe</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语法基础</category>
      </categories>
      <tags>
        <tag>C语言基础</tag>
      </tags>
  </entry>
</search>
